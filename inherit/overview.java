package inherit;

/*
概述：继承是面向对象三大特征之一。可以使得子类具有父类的属性和方法，还可以在子类中重新定义，追加属性和方法

   格式：public class 子类名 extends 父类名{}
   范例：public class Zi extends Fu{}
  Fu：是父类，也被称为基类、超类
  Zi：是子类，也被称为派生类

  继承中子类的特点：
    1.子类可以有父类的内容
    2.子类还可以有自己特有的内容

    继承的好处与弊端：
    继承的好处：
    1.提高了代码的复用性（多个类相同的成员可以放在同一个类中）
    2.提高了代码的维护性（如果方法的代码需要修改，修改一处即可）
    继承的弊端：
    继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性

    什么时候使用继承？
    1.继承体现的关系： is a
    2.假设法：我有两个类A和B，如果满足A是B的一种，或者B是A的一种，就说明它们存在继承关系，这个时候就可以考虑使用继承来体现，否则就不能滥用继承
    3.举例：苹果和水果，猫和动物，猫和狗

    继承中变量的访问特点：
    在子类方法中访问一个变量的顺序
    1.子类局部范围找
    2.子类成员范围找
    3.父类成员范围找
    4.如果都没有就会报错（不考虑父亲的父亲）

    super:
    super关键字的用法与this关键字的用法相似
    this：代表本类对象的引用（this关键字指向调用该方法的对象，一般我们是在当前类中使用this关键字，所以我们常说this代表本类对象的引用）
    super：代表父类存储空间的标识（可以理解为父类对象引用）

    关键字      访问成员变量        访问构造方法        访问成员方法
    this       this.成员变量        this（...）         this.成员方法（...）
              访问本类成员变量     访问本类构造方法     访问本类成员方法
    super      super.成员变量      super（...）         super.成员方法（...）
              访问父类成员变量     访问父类构造方法     访问父类成员方法

    继承中构造方法的访问特点：
      子类中所有的构造方法默认都会访问父类中无参的构造方法
      为什么呢?
      1.因为子类会继承父类中的数据，可能还会使用父类的数据，所以，子类初始化之前，一定先完成父类数据的初始化
      2.每一个子类构造方法的第一条语句默认都是：super（），访问父类无参构造方法，完成对父类数据的初始化

      如果父类中没有无参构造方法，只有有参构造方法怎么办呢？
      1.通过super关键字去显示的调用父类的带参构造方法
      2.在父类中自己提供一个无参构造方法
      推荐：自己给出无参构造方法

    继承中成员方法的访问特点：
    通过子类对象访问一个方法：
    1.子类成员范围找
    2.父类成员范围找
    3.如果都没有就会报错（不考虑父亲的父亲....）

    方法重写
     方法重写概述：子类中出现了和父类中一模一样的方法声明

    方法重写的应用
     1.当子类需要父类的功能，而功能主体子类有自己特有的内容时，可以重写父类中的方法，这样，既沿袭了父类的功能，又定义了子类特有的内容
     2.练习：手机类和新手机类
     @Override
     1.是一个注解
     2.可以帮助我们检查重写方法的方法声明的正确性

     方法重写的注意事项
      1.私有方法不能被重写，也不能被调用（父类私有成员，子类是不能继承的）
      2.子类方法访问权限不能更低（public>默认>私有）

     继承中的注意事项
      Java中类只支持单继承，不支持多继承
      Java中类支持多层继承
*/
public class overview {
}
