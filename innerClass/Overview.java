package innerClass;

/*
内部类的基本概念：
     1.当一个类的定义出现在另外一个类的类体中时，那么这个类叫做内部类（Inner），而这个内部类所在的类叫做外部类（Outer）
     2.类中的内容：成员变量、成员方法、构造方法、静态成员、构造块和静态代码块、内部类
实际作用：
    1.当一个类存在的价值仅仅是为了某一个类单独服务时，那么就可以将这个类定义为服务类中的内部类，这样可以隐藏该类的实现细节并且可以方便的访问外部类的私有成员而不再需要提供公有的get和set方法
 内部类的分类：
    1.普通内部类：直接将一个类的定义放在另一个类的类体中
    2.静态内部类：使用static关键字修饰的内部类，隶属于类层级
    3.局部内部类：直接将一个类的定义放在方法体的内部时
    4.匿名内部类：就是指没有名字的内部类

    普通（成员）内部类的格式：
    访问修饰符 class 外部类的类名{
      访问修饰符 class 内部类的类名{
        内部类的类体；
      }
    }
    普通内部类和正常类一样可以使用final或者abstract，private，protected关键字，可以定义成员变量成员方法构造方法等。
    如果内部类需要使用外部类中与本类内部同名的成员变量或成员方法时需要用到this关键字

    静态内部类的格式
    访问修饰符 class 外部类的类名{
      访问修饰符 class 内部类的类名{
        内部类的类体；
      }
    }

    局部（方法）内部类的格式
    访问修饰符 class 外部类的类名{
      访问修饰符  返回值类型 成员方法 （形参列表）{
      class 内部类的类名{
        内部类的类体；
        }
      }
    }
    1.局部内部类只能在该方法的内部可以使用
    2.局部内部类可以在方法体内部直接创建对象
    3.局部内部类不能使用访问控制符和static关键字修饰符
    4.局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局部变量的声明周期不同所致

   回调模式
   概念：回调模式是指如果一个方法的参数是接口类型，则在调用该方法时，需要创建并传递
         一个实现此接口类型的对象；而该方法在运行时会调用到参数对象中所实现的方法（接口中定义的）

    匿名内部类的语法格式（重点）*********
    ·接口/父类类型 引用变量名=new 接口/父类类型（）{方法的重写}；
 */
public class Overview {
}
