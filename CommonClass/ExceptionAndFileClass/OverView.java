package CommonClass.ExceptionAndFileClass;

public class OverView {
    /*
    java.lang.Throwable类是Java语言中错误Error和异常Exception的超类
    1.其中Error类主要用于描述Java虚拟机无法解决的严重错误，通常无法编码解决，如：jvm挂掉了等。
    2.其中Exception类主要用于描述因编程错误或者偶然外在因素导致的轻微错误，通常可以通过编码解决

    java,lang.Exception类是所有异常类的超类，主要分为以下两种：
    1.RuntimeException：运行时异常，也叫做非检测性异常：编译器无法检测的异常
    2.IOException和其他异常，也叫做检测性异常，所谓的检测性异常就是指能够在编译阶段检测出来的异常
    3.其中RuntimeException类的主要子类：
      ArithmeticException类：算术异常
      ArrayIndexOutOfBoundsException类：数组下标越界异常
      NullPointerException：空指针异常
      ClassCastException:类型转化异常
      NUmber-FormatException：数字格式异常
    4.当程序执行过程中出现异常又没有手动处理的时候，虚拟机会采用默认处理异常的方式来处理，而默认处理异常的方式就是：打印异常的名称、异常发生的原因，以及异常发生的位置以及终止程序
    /*
    开发中尽量使用if语句判断来避免异常的发生
    但是过多的if语句则会导致代码加长，臃肿，可读性差

    异常的捕获：
    见测试代码
    1.当需要编写多个catch分支时，切记小类型应该放在大类型的前面
    2.finally通常用于进行善后处理，如：关闭已经打开的文件等

   异常的抛出：
   ·当某些情况下：有些异常不能处理或者不便于处理的时候，就可以将该异常转移给该方法的调用者，这种方法就叫做异常的抛出。
   ·语法格式：
     访问权限 返回值类型 方法名称（形参列表）throws 异常类型1，异常类型2......{方法体}
     方法重写的要求：要求方法不能抛出更大的异常
    ·注意：子类重写的方法不能抛出更大的异常，不能抛出平级不一样的异常，但是可以抛出一样的异常、更小的异常以及不能抛出异常
    ·经验分享：
    1.若父类中被重写的方法没有抛出异常时，则子类中重写的方法只能进行异常的捕获处理
    2.若一个方法内部又以递进方式分别调用了好几个其他方法，则建议这些方法内可以使用抛出的方法处理到最后一层进行捕获操作

    自定义异常
    见测试代码
     */

}
